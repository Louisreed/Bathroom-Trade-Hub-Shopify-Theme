const fs = require('fs').promises;
const path = require('path');

class DiscountSyncEngine {
  constructor(config) {
    this.config = config;
    this.themePath = config.themePath || '../';
    this.templateFiles = config.templateFiles || [
      'snippets/hubpro-discount-simple.liquid',
      'snippets/product-price.liquid'
    ];
  }

  /**
   * Main sync function - generates templates from Shopify discount data
   */
  async syncDiscounts(shopifyClient) {
    try {
      console.log('üîÑ Starting discount sync...');
      
      // Fetch discount data from Shopify
      const discountData = await this.fetchDiscountData(shopifyClient);
      
      // Generate template content
      const templates = await this.generateTemplates(discountData);
      
      // Write templates to theme files
      await this.writeTemplates(templates);
      
      console.log('‚úÖ Discount sync completed successfully');
      return {
        success: true,
        timestamp: new Date().toISOString(),
        templatesUpdated: Object.keys(templates).length,
        discountsProcessed: discountData.discountCodes.length
      };
      
    } catch (error) {
      console.error('‚ùå Sync failed:', error);
      throw error;
    }
  }

  /**
   * Fetch discount codes and collections from Shopify
   */
  async fetchDiscountData(shopifyClient) {
    console.log('üìä Fetching discount data from Shopify...');
    
    // GraphQL query for discount codes
    const discountQuery = `
      query getDiscountCodes($first: Int!) {
        codeDiscountNodes(first: $first) {
          edges {
            node {
              id
              codeDiscount {
                ... on DiscountCodeBasic {
                  title
                  codes(first: 10) {
                    edges {
                      node {
                        code
                      }
                    }
                  }
                  customerGets {
                    value {
                      ... on DiscountPercentage {
                        percentage
                      }
                    }
                  }
                  customerSelection {
                    ... on DiscountCustomerSegments {
                      segments {
                        id
                        name
                      }
                    }
                  }
                  minimumRequirement {
                    ... on DiscountMinimumSubtotal {
                      greaterThanOrEqualToSubtotal {
                        amount
                        currencyCode
                      }
                    }
                  }
                  status
                  startsAt
                  endsAt
                }
              }
            }
          }
        }
      }
    `;

    // Collections query
    const collectionsQuery = `
      query getCollections($first: Int!) {
        collections(first: $first) {
          edges {
            node {
              id
              handle
              title
            }
          }
        }
      }
    `;

    try {
      const [discountResponse, collectionsResponse] = await Promise.all([
        shopifyClient.request(discountQuery, {
          variables: { first: 250 }
        }),
        shopifyClient.request(collectionsQuery, {
          variables: { first: 250 }
        })
      ]);

      return {
        discountCodes: discountResponse.data.codeDiscountNodes.edges.map(edge => edge.node),
        collections: collectionsResponse.data.collections.edges.map(edge => edge.node)
      };

    } catch (error) {
      console.error('Failed to fetch discount data:', error);
      throw error;
    }
  }

  /**
   * Generate template content from discount data
   */
  async generateTemplates(discountData) {
    console.log('üèóÔ∏è  Generating template content...');
    
    const templates = {};
    
    // Generate hubpro-discount-simple.liquid
    templates['snippets/hubpro-discount-simple.liquid'] = this.generateHubProDiscountTemplate(discountData);
    
    // Generate product-price.liquid updates (if needed)
    // templates['snippets/product-price.liquid'] = this.generateProductPriceTemplate(discountData);
    
    return templates;
  }

  /**
   * Generate the hubpro-discount-simple.liquid template
   */
  generateHubProDiscountTemplate(discountData) {
    const { discountCodes, collections } = discountData;
    
    let template = `{%- comment -%}
  HubPRO Discount Logic - Auto-generated by Discount Sync App
  Generated: ${new Date().toISOString()}
  
  This template calculates customer-specific discounts based on:
  - Customer tags (hubpro-free, hubpro-plus, diy)
  - Product collections
  - Discount codes configured in Shopify Admin
{%- endcomment -%}

{%- liquid
  assign hubpro_discount_percentage = 0
  assign customer_segment = 'regular'
  
  # Determine customer segment
  if customer.tags contains 'hubpro-free'
    assign customer_segment = 'hubpro-free'
  elsif customer.tags contains 'hubpro-plus'
    assign customer_segment = 'hubpro-plus'
  elsif customer.tags contains 'diy'
    assign customer_segment = 'diy'
  endif
-%}

{%- comment -%} Collection-based discount logic {%- endcomment -%}
{%- liquid
`;

    // Group discounts by customer segment and collection
    const discountLogic = this.buildDiscountLogic(discountCodes);
    
    // Generate conditional logic for each customer segment
    Object.entries(discountLogic).forEach(([segment, collections]) => {
      if (Object.keys(collections).length > 0) {
        template += `
  # ${segment.toUpperCase()} discounts
  if customer_segment == '${segment}'`;
        
        Object.entries(collections).forEach(([collectionHandle, percentage]) => {
          template += `
    if product.collections contains collections['${collectionHandle}']
      assign hubpro_discount_percentage = ${percentage}`;
        });
        
        template += `
    endif
  endif`;
      }
    });

    template += `
-%}

{%- comment -%} Output discount percentage for use in pricing logic {%- endcomment -%}
{{ hubpro_discount_percentage }}`;

    return template;
  }

  /**
   * Build discount logic mapping from Shopify discount data
   */
  buildDiscountLogic(discountCodes) {
    const logic = {
      'hubpro-free': {},
      'hubpro-plus': {},
      'diy': {}
    };

    discountCodes.forEach(discountNode => {
      const discount = discountNode.codeDiscount;
      
      if (!discount || discount.status !== 'ACTIVE') return;
      
      // Extract percentage
      const percentage = discount.customerGets?.value?.percentage;
      if (!percentage) return;
      
      // Parse discount title/code to determine target segment and collection
      const title = discount.title.toLowerCase();
      const codes = discount.codes?.edges?.map(edge => edge.node.code) || [];
      
      // Determine customer segment from discount title/code
      let targetSegment = 'regular';
      if (title.includes('hubpro-free') || codes.some(code => code.toLowerCase().includes('free'))) {
        targetSegment = 'hubpro-free';
      } else if (title.includes('hubpro-plus') || codes.some(code => code.toLowerCase().includes('plus'))) {
        targetSegment = 'hubpro-plus';
      } else if (title.includes('diy')) {
        targetSegment = 'diy';
      }
      
      // Extract collection from discount title
      const collectionMatch = title.match(/(kartell|maxi-panels|wall-panels|nuie|trims)/);
      if (collectionMatch) {
        const collection = collectionMatch[1];
        logic[targetSegment][collection] = Math.round(percentage * 100);
      }
    });

    return logic;
  }

  /**
   * Write generated templates to theme files
   */
  async writeTemplates(templates) {
    console.log('üìù Writing templates to theme files...');
    
    for (const [filePath, content] of Object.entries(templates)) {
      const fullPath = path.join(this.themePath, filePath);
      
      try {
        await fs.writeFile(fullPath, content, 'utf8');
        console.log(`‚úÖ Updated: ${filePath}`);
      } catch (error) {
        console.error(`‚ùå Failed to write ${filePath}:`, error);
        throw error;
      }
    }
  }

  /**
   * Create backup of existing templates before sync
   */
  async createBackup() {
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = path.join(this.themePath, 'backups', `sync-${timestamp}`);
    
    try {
      await fs.mkdir(backupDir, { recursive: true });
      
      for (const filePath of this.templateFiles) {
        const sourcePath = path.join(this.themePath, filePath);
        const backupPath = path.join(backupDir, path.basename(filePath));
        
        try {
          await fs.copyFile(sourcePath, backupPath);
          console.log(`üì¶ Backed up: ${filePath}`);
        } catch (error) {
          console.warn(`‚ö†Ô∏è  Could not backup ${filePath}:`, error.message);
        }
      }
      
      return backupDir;
    } catch (error) {
      console.error('Failed to create backup:', error);
      throw error;
    }
  }
}

module.exports = { DiscountSyncEngine };
